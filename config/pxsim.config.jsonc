// ----------------------------------------------------------------------------
// pxsim.config.jsonc
// Configuration settings for Pluxsim <<VERSION>> application in jsonc format
// ----------------------------------------------------------------------------

{
    // Global properties
    // ------------------------------------------------------------------------
    "app": {

        // [NOT CURRENTLY USED] specify the logging level for pxsim runtime logs
        // TRACE : 0 (most verbose)
        // DEBUG : 1
        // INFO  : 2
        // WARN  : 3
        // ERROR : 4
        // FATAL : 5
        // ---------------------------------------------------------------------
        "log_level" : 0,

        // [NOT CURRENTLY USED] specify the logging directory for pxsim logs
        // if file-out is enabled
        "log_dir"   : ""
    },

    // WEB SERVER properties
    // -------------------------------------------------------------------------
    "httpserver" : {

        // set default host address for HTTP connections with internal http server
        "ip_addr" : "0.0.0.0",

        // set default port number for HTTP connections with internal http server
        "port_num": 11204
    },

    // MODBUS properties
    // -------------------------------------------------------------------------
    "modbus" : {

        // Set the default host address for Modbus-TCP connections
        "ip_addr" : "0.0.0.0",

        // Set the default port number for Modbus-TCP connections
        "port_num": 51104,

        // Modbus slave holding register size
        // The mentioned amount of registers will be maintained by the Modbus
        // agent in a single holding memory block.
        // NOTE : Make sure the register size is enough to accomodate all the
        // machine mappings
        "reg_count" : 10
    },

    // List out configuration for machines that will be simulated by the px_sim
    // engine. This will the list of machines (should be atleast one) and no
    // limit on max number of machines.
    "simulator" : {

        // The following is a set-list of machines that will be created by pxsim
        // and will be made to run independently on separate threads. Each machine
        // at any given moment can only produce one product. 
        "machines" : {

            // The following is the schema for a machine configuration:
            // - breakdown_pct
            // Set the probability of machine's breakdown in pct. Should be a float
            // point ranging from 0.5 to 100.
            // 
            // - modbus_reg_allocs
            // Here we reserve any 2 holding registers by index from the register 
            // block we specified in the modbus configuration earlier. It is advised
            // to keep reserve only adjacent registers for machine. Both registers
            // together contain the production count for a machine in LSW (Least
            // Significant Word) and MSW (Most Significant Word). More details about
            // the LSW and MSW calculation in readme.
            //
            // - production_count_init
            // Specify the positive starting integer for production count
            //
            // - products
            // A set-list of products this machine can produce, only one product
            // at a time
            //
            // -----------------------------------------------------------------
            // The cycle_time_s and breakdown_threshold_s are two very important
            //  variables that control the state of the running machine.
            //
            // NOTE : ALWAYS MAKE SURE breakdown_threshold_s > cycle_time_s. ALWAYS.
            //
            // Explained as follows.
            // First, take breakdown_threshold_s = uppper-bound or UB
            //   and, take cycle_time_s = lower-bound or LB
            //
            // The UB and LB give us the production time range for a product.
            // So with a product having LB as 5s and UB 15s, its production range
            // will be UB - LB = 10s starting from 5s to 15s.
            //
            // Now the machine's production time when this product is being produced
            // will always for be between 5 to 15s + 1.
            // This range can now be used to compute the state of the machine during
            // runtime.
            // 
            // Any computed range is divided into 3 seconds (technically 4)
            //  0% to 24% of range maps to machine being ACTIVE or HEALTHY
            // 25% to 49% of range maps to machine being SLOW
            // 50% to 99% of range maps to machine being IDLE or UNHEALTHY
            // > 100% range maps to machine being in BREAKDOWN
            //
            // So how is this helpful?
            // As mentioned above, a machine's production time will vary pseudo-randomly
            // between its LB and UB. And everytime a production cycle completes, the
            // production time will fall in any of the above mentioned 4 sections.
            // This will help us determine the state of machine in realtime.
            // 
            // Expanding on our previous example with LB = 5s and UB = 15s
            // Production time < 7.5 maps to machine being ACTIVE or HEALTHY
            // Production time < 10  maps to machine being SLOW
            // Production time < 15  maps to machine being IDLE or UNHEALTHY 
            // Production time > 15  maps to machine being BROKEN

            "fruitninja" : {
                "breakdown_pct" : 20,
                "modbus_reg_allocs" : [0, 1],
                "production_count_init" : 0,
                
                "products" : 
                {
                    "apple" : {
                        "cycle_time_s" : 5,
                        "breakdown_threshold_s" : 8
                    },
                    
                    "kiwi" : {
                        "cycle_time_s" : 3,
                        "breakdown_threshold_s" : 7 
                    },
                    
                    "orange" : {
                        "cycle_time_s" : 8,
                        "breakdown_threshold_s" : 12
                    }

                    // ..
                }
            }
        }
    }
}