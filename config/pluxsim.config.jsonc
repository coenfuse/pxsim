/// ----------------------------------------------------------------------------
/// pluxsim.config.jsonc
/// Configuration settings for Pluxsim <<VERSION>> application in jsonc format
/// ----------------------------------------------------------------------------

{
    /// Global properties
    /// ------------------------------------------------------------------------

    /// specify the path of a JSON file that lists out init DB entries for Pluxsim
    /// that will be initialized on startup
    "db_config" : "",


    /// WEB SERVER properties
    /// ------------------------------------------------------------------------

    /// Set the default host address for HTTP connections with the Pluxsim webserver
    "host_ip" : "0.0.0.0",

    /// Set the default port number for HTTP connections with Pluxsim webserver
    "host_port" : 11204,


    /// Modbus properties
    /// ------------------------------------------------------------------------
    
    /// Set the default host address for Modbus-TCP connections with Pluxsim
    "modbus_ip" : "0.0.0.0",

    /// Set the default port number for Modbus TCP connection with Pluxsim
    "modbus_port" : 51104,

    /// Holding register size
    /// The mentioned amount of registers will be maintained by the Modbus agent
    /// in a single holding memory block
    "modbus_regcount" : "20",



    /// PLUXSIM properties
    /// ------------------------------------------------------------------------

    /// List out configuration for machines that will be simulated by PLUXSIM ENGINE
    /// This will be a list of machines (should be alteast one) and no limit on 
    /// max number of machines.
    ///
    /// machine -
    ///     name          - Name of the machine that will be simulated
    ///     breakdown_pct - Set the probability of machine's breakdown in percentage. 
    ///                     Should be a floating point ranging from 0.5 to 100.
    ///     products      - A list of products that can be manufactured by machine
    ///                     (one at a time). The list should contain atleast one 
    ///                     item but no range on upper limit. 
    ///                     The last item in the list would be the default product 
    ///                     that will be manufactured by this machine, unless 
    ///                     switched otherwise manually.
    ///
    /// product -
    ///     name                   - Name of the project 
    ///     cycle_time_s           - Min. amount of time req. in seconds for producing this product 
    ///     breakdown_threshold_s  - Max. tolerable manufacture time for this product, 
    ///                              beyond this the machine is marked as broken
    ///     production_starts_with - Specify the starting amount for a production
    ///     modbus_register_allocs - Here we reserve the registers by index to hold a product's production count,
    ///                              and its last production time. This is a bad design as it is coupled with Modbus,
    ///                              it will be simplified later. Here we create a list that contains register indexes.
    ///                              The register number present at index 0 of this key will store the machine's current
    ///                              production count. The register number present at index 1 will store machine's last
    ///                              production duration (That can be used to deduce the state of machine)
    ///
    /// The cycle_time_s and breakdown_threshold_s are two very important variables
    /// that control the state of the running machine.
    ///
    /// NOTE : ALWAYS MAKE SURE breakdown_threshold_s > cycle_time_s. ALWAYS.
    ///
    /// Explained as follows.
    /// First, take breakdown_threshold_s as our uppper-bound or UB
    ///   and, take cycle_time_s as our lower-bound or LB
    ///
    /// The UB and LB give us the production time range for a product.
    /// So with a product having LB as 5s and UB 15s, its production range will
    /// be UB - LB = 10s starting from 5s to 15s.
    ///
    /// Now the machine's production time when this product is being produced will
    /// always for be between 5 to 15s + 1.
    /// This range can now be used to compute the state of the machine during
    /// runtime.
    /// 
    /// Any computed range is divided into 3 seconds (technically 4)
    ///  0% to 24% of range maps to machine being ACTIVE or HEALTHY
    /// 25% to 49% of range maps to machine being SLOW
    /// 50% to 99% of range maps to machine being IDLE or UNHEALTHY
    /// > 100% range maps to machine being in BREAKDOWN
    ///
    /// So how is this helpful?
    /// As mentioned above, a machine's production time will vary pseudo-randomly
    /// between its LB and UB. And everytime a production cycle completes, the
    /// production time will fall in any of the above mentioned 4 sections.
    /// This will help us determine the state of machine in realtime.
    /// 
    /// Expanding on our previous example with LB = 5s and UB = 15s
    /// Production time < 7.5 maps to machine being ACTIVE or HEALTHY
    /// Production time < 10  maps to machine being SLOW
    /// Production time < 15  maps to machine being IDLE or UNHEALTHY 
    /// Production time > 15  maps to machine being BROKEN

    "machines" : [
        {
            "name" : "fruitninja",
            "breakdown_pct" : 20,
            "products" : [
                {
                    "name" : "apple",
                    "cycle_time_s" : 5,
                    "breakdown_threshold_s"  : 8,
                    "production_starts_with" : 0,
                    "modbus_register_allocs" : [0, 1]
                },
                {
                    "name" : "kiwi",
                    "cycle_time_s" : 3,
                    "breakdown_threshold_s"  : 7,
                    "production_starts_with" : 0,
                    "modbus_register_allocs" : [2, 3]
                },
                {
                    "name" : "orange",
                    "cycle_time_s" : 8,
                    "breakdown_threshold_s"  : 12,
                    "production_starts_with" : 0,
                    "modbus_register_allocs" : [4, 5]
                },
                {
                    "name" : "papaya",
                    "cycle_time_s" : 1,
                    "breakdown_threshold_s"  : 15,
                    "production_starts_with" : 0,
                    "modbus_register_allocs" : [6, 7]
                },
                {
                    "name" : "peach",
                    "cycle_time_s" : 6,
                    "breakdown_threshold_s"  : 17,
                    "production_starts_with" : 0,
                    "modbus_register_allocs" : [8, 9]
                }

                // ...
            ]
        }

        // ...
    ]
}